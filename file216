class Solution {
public:
    vector <int> left, right;
    void nearestsmallerleft(vector<int> arr) {
        vector <int> ans;
        stack< pair <int, int> > s;
        for (int i = 0; i < arr.size(); i++) {
            if (s.empty()) {
                ans.push_back(-1);
            } else if (!s.empty() && s.top().first < arr[i]){
                ans.push_back(s.top().second);
            } else {
                while (!s.empty() && s.top().first >= arr[i]) {
                    s.pop();
                }
                if (s.empty()) {
                    ans.push_back(-1);
                } else {
                    ans.push_back(s.top().second);
                }
            }
            s.push({arr[i], i});
        }
        left  = ans;
    }
    
    void nearestsmallerright(vector<int> arr) {
        vector <int> ans;
        stack< pair <int, int> > s;
        for (int i = arr.size() - 1; i >= 0; i--) {
            if (s.empty()) {
                ans.push_back(arr.size());
            } else if (!s.empty() && s.top().first < arr[i]){
                ans.push_back(s.top().second);
            } else {
                while (!s.empty() && s.top().first >= arr[i]) {
                    s.pop();
                }
                if (s.empty()) {
                    ans.push_back(arr.size());
                } else {
                    ans.push_back(s.top().second);
                }
            }
            s.push({arr[i], i});
        }
         reverse(ans.begin(), ans.end());
        right  = ans;
    }
    
    int largestRectangleArea(vector<int>& heights) {
        nearestsmallerleft(heights);
        nearestsmallerright(heights);
        int ret = 0;
        for (int i = 0; i < heights.size(); i++) {
            ret = max(ret, (right[i]-left[i]- 1) * heights[i]);
        }
        return ret;
    } 

}; 
